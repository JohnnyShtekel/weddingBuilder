/*(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.*/
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var React = require('react');

var types = React.PropTypes;

var DOWN_KEY = 40;
var ENTER_KEY = 13;
var ESC_KEY = 27;
var TAB_KEY = 9;
var UP_KEY = 38;

var AutocompleteInput = function (_React$Component) {
  _inherits(AutocompleteInput, _React$Component);

  function AutocompleteInput() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, AutocompleteInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(AutocompleteInput)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.change = function (e) {
      var value = e.currentTarget.value;

      _this.props.onSearch(value, function (suggestedValues) {
        _this.props.$autocomplete.merge({ hidden: false, highlightedSuggestion: 0, value: value, suggestedValues: suggestedValues }).flush();
      });
    }, _this.keyDown = function (e) {
      var _keyCodes;

      var keyCode = e.keyCode;

      var _this$props$$autocomp = _this.props.$autocomplete.get();

      var highlightedSuggestion = _this$props$$autocomp.highlightedSuggestion;
      var suggestedValues = _this$props$$autocomp.suggestedValues;
      var _this$props$onPicking = _this.props.onPicking;
      var onPicking = _this$props$onPicking === undefined ? function () {
        return suggestedValues;
      } : _this$props$onPicking;


      var pickItem = function pickItem() {
        var selectableSuggestions = onPicking(suggestedValues);
        e && keyCode === ENTER_KEY && e.preventDefault();
        _this.props.$autocomplete.merge({ highlightedSuggestion: -1, hidden: true }).flush();
        _this.props.onPick(selectableSuggestions[highlightedSuggestion] || { value: _this.props.$autocomplete.get('value') });
      };

      var keyCodes = (_keyCodes = {}, _defineProperty(_keyCodes, DOWN_KEY, function () {
        var selectableSuggestions = onPicking(suggestedValues);
        _this.props.$autocomplete.merge({ hidden: false, highlightedSuggestion: Math.min(highlightedSuggestion + 1, selectableSuggestions.length - 1) });
        _this.props.scrollIntoView();
      }), _defineProperty(_keyCodes, UP_KEY, function () {
        _this.props.$autocomplete.merge({ highlightedSuggestion: Math.max(highlightedSuggestion - 1, -1) });
        _this.props.scrollIntoView();
      }), _defineProperty(_keyCodes, TAB_KEY, pickItem), _defineProperty(_keyCodes, ENTER_KEY, pickItem), _defineProperty(_keyCodes, ESC_KEY, function () {
        _this.props.$autocomplete.merge({ highlightedSuggestion: -1, hidden: true });
      }), _defineProperty(_keyCodes, 'noop', function noop() {}), _keyCodes);

      keyCodes[keyCode in keyCodes ? keyCode : 'noop']();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AutocompleteInput, [{
    key: 'renderDefault',
    value: function renderDefault(props) {
      return React.createElement('input', _extends({}, props, { className: classnames('autocomplete-input', 'form-control', props.className), type: 'search', value: props.value, 'aria-label': props.placeholder }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var autoFocus = _props.autoFocus;
      var children = _props.children;
      var $autocomplete = _props.$autocomplete;
      var onPick = _props.onPick;
      var onPicking = _props.onPicking;
      var onSearch = _props.onSearch;
      var scrollIntoView = _props.scrollIntoView;

      var props = _objectWithoutProperties(_props, ['autoFocus', 'children', '$autocomplete', 'onPick', 'onPicking', 'onSearch', 'scrollIntoView']);

      if (!$autocomplete) return null;

      var _$autocomplete$get = $autocomplete.get();

      var value = _$autocomplete$get.value;

      var otherProps = { autoFocus: autoFocus, value: value, onChange: this.change, onKeyDown: this.keyDown };
      props = _extends({}, props, otherProps);
      if (!children) return this.renderDefault(props);
      children = React.Children.map(children, function (e) {
        return React.cloneElement(e, props);
      });
      return React.createElement(
        'div',
        null,
        children
      );
    }
  }]);

  return AutocompleteInput;
}(React.Component);

AutocompleteInput.propTypes = {
  $autocomplete: types.object,
  autoFocus: types.bool,
  children: function children(props, name) {
    if (props[name] && props[name].length) return new Error('AutocompleteInput can only wrap one element');
  },

  disabled: types.bool,
  onClick: types.func,
  onFocus: types.func,
  onPick: types.func,
  onPicking: types.func,
  onSearch: types.func,
  scrollIntoView: types.func
};
AutocompleteInput.defaultProps = {
  autoFocus: null
};
AutocompleteInput.DOWN_KEY = DOWN_KEY;
AutocompleteInput.ENTER_KEY = ENTER_KEY;
AutocompleteInput.ESC_KEY = ESC_KEY;
AutocompleteInput.TAB_KEY = TAB_KEY;
AutocompleteInput.UP_KEY = UP_KEY;


module.exports = AutocompleteInput;