/*(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.*/
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var React = require('react');
var types = React.PropTypes;

function onClick(value, e) {
  e.preventDefault();
  this.props.onPick(value);
}

var AutocompleteList = function (_React$Component) {
  _inherits(AutocompleteList, _React$Component);

  function AutocompleteList() {
    _classCallCheck(this, AutocompleteList);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AutocompleteList).apply(this, arguments));
  }

  _createClass(AutocompleteList, [{
    key: 'renderSuggestionList',
    value: function renderSuggestionList() {
      var _this2 = this;

      var className = this.props.className;

      var suggestedValues = this.props.$autocomplete.get('suggestedValues');
      var suggestions = suggestedValues.map(function (suggestion, key) {
        var value = '_key_' in suggestion ? suggestion._key_ : suggestion.value;
        var className = classnames('autocomplete-item', { highlighted: key === _this2.props.$autocomplete.get('highlightedSuggestion') }, { selected: value === _this2.props.selectedSuggestion });
        return React.createElement(
          'li',
          { key: key },
          React.createElement(
            'a',
            { href: '#', onClick: onClick.bind(_this2, suggestion), role: 'button', title: value, className: className },
            value
          )
        );
      });
      if (!suggestions.length) return null;
      return React.createElement(
        'ul',
        { className: classnames('autocomplete-list', className) },
        suggestions
      );
    }
  }, {
    key: 'renderDefault',
    value: function renderDefault() {
      var _props = this.props;
      var $autocomplete = _props.$autocomplete;
      var minSearchTerm = _props.minSearchTerm;

      var _$autocomplete$get = $autocomplete.get();

      var hidden = _$autocomplete$get.hidden;
      var value = _$autocomplete$get.value;

      if (hidden || value.length < minSearchTerm) return null;
      return this.renderSuggestionList();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var children = _props2.children;
      var $autocomplete = _props2.$autocomplete;

      var props = _objectWithoutProperties(_props2, ['children', '$autocomplete']);

      if (!$autocomplete) return null;
      if (!children) return this.renderDefault();

      var _$autocomplete$get2 = $autocomplete.get();

      var hidden = _$autocomplete$get2.hidden;
      var value = _$autocomplete$get2.value;
      var highlightedSuggestion = _$autocomplete$get2.highlightedSuggestion;
      var suggestedValues = _$autocomplete$get2.suggestedValues;

      if (hidden) return null;
      return React.createElement(
        'div',
        null,
        React.Children.map(children, function (e) {
          return React.cloneElement(e, _extends({ value: value, suggestedValues: suggestedValues, highlightedSuggestion: highlightedSuggestion, onClick: onClick }, props));
        })
      );
    }
  }]);

  return AutocompleteList;
}(React.Component);

AutocompleteList.propTypes = {
  $autocomplete: types.object,
  children: function children(props, name) {
    if (props[name] && props[name].length) return new Error('AutocompleteList can only wrap one element');
  },

  className: types.string,
  minSearchTerm: types.number,
  onPick: types.func,
  selectedSuggestion: types.any
};
AutocompleteList.defaultProps = {
  minSearchTerm: 0
};


module.exports = AutocompleteList;