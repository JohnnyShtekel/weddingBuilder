/*(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.*/
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _puiReactMixins = require('pui-react-mixins');

var _puiReactMixins2 = _interopRequireDefault(_puiReactMixins);

var _scrim_mixin = require('pui-react-mixins/mixins/scrim_mixin');

var _scrim_mixin2 = _interopRequireDefault(_scrim_mixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AutocompleteList = require('./autocomplete-list');
var AutocompleteInput = require('./autocomplete-input');
var classnames = require('classnames');
var Cursor = require('pui-cursor');

var _require = require('event-stream');

var map = _require.map;
var readable = _require.readable;

var React = require('react');
var ReactDOM = require('react-dom');

var scrollIntoView = require('scroll-into-view');
var TrieSearch = require('trie-search');

require('pui-css-autocomplete');

var types = React.PropTypes;

function trieFromSearchableItems(searchableItems) {
  return new Promise(function (resolve) {
    var trie = void 0;
    readable(function (count, callback) {
      if (searchableItems && count >= searchableItems.length) this.emit('end');
      callback(null, searchableItems[count]);
    }).pipe(map(function (value) {
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        if (!trie) trie = new TrieSearch();
        trie.addFromObject(value);
        resolve(trie);
        return;
      }
      if (!trie) trie = new TrieSearch('value');
      trie.add({ value: value });
      resolve(trie);
    }));
  });
}

var Autocomplete = function (_mixin$with) {
  _inherits(Autocomplete, _mixin$with);

  function Autocomplete(props, context) {
    _classCallCheck(this, Autocomplete);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Autocomplete).call(this, props, context));

    _initialiseProps.call(_this);

    var value = _this.props.value || '';
    _this.state = { hidden: true, highlightedSuggestion: 0, suggestedValues: [], trie: null, value: value };
    return _this;
  }

  _createClass(Autocomplete, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var value = _ref.value;

      if (value !== this.props.value) {
        this.setState({ value: value });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(Object.getPrototypeOf(Autocomplete.prototype), 'componentDidMount', this).call(this);
      this.props.onInitializeItems(function () {
        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var searchableItems = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
          var trie;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return trieFromSearchableItems(searchableItems);

                case 2:
                  trie = _context.sent;

                  _this2.setState({ searchableItems: searchableItems, trie: trie });

                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this2);
        }));

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var $autocomplete = new Cursor(this.state, function (state) {
        return _this3.setState(state);
      });
      var _props = this.props;
      var className = _props.className;
      var maxItems = _props.maxItems;
      var onFocus = _props.onFocus;
      var onClick = _props.onClick;
      var disabled = _props.disabled;
      var selectedSuggestion = _props.selectedSuggestion;
      var placeholder = _props.placeholder;
      var input = _props.input;
      var children = _props.children;
      var onInitializeItems = _props.onInitializeItems;
      var onFilter = _props.onFilter;
      var onPick = _props.onPick;
      var onSearch = _props.onSearch;

      var props = _objectWithoutProperties(_props, ['className', 'maxItems', 'onFocus', 'onClick', 'disabled', 'selectedSuggestion', 'placeholder', 'input', 'children', 'onInitializeItems', 'onFilter', 'onPick', 'onSearch']);

      var scrollIntoView = this.scrollIntoView;
      var onPick = this.onPick;
      var onSearch = this.onSearch;

      input = React.cloneElement(input, { $autocomplete: $autocomplete, onPick: onPick, scrollIntoView: scrollIntoView, onSearch: onSearch, disabled: disabled, onFocus: onFocus, onClick: onClick, placeholder: placeholder });
      return React.createElement(
        'div',
        _extends({ className: classnames('autocomplete', className) }, props),
        input,
        React.createElement(
          AutocompleteList,
          { $autocomplete: $autocomplete, onPick: onPick, maxItems: maxItems, selectedSuggestion: selectedSuggestion },
          children
        )
      );
    }
  }]);

  return Autocomplete;
}((0, _puiReactMixins2.default)(React.Component).with(_scrim_mixin2.default));

Autocomplete.propTypes = {
  className: types.string,
  disabled: types.bool,
  input: types.object,
  maxItems: types.number,
  onClick: types.func,
  onFilter: types.func,
  onFocus: types.func,
  onInitializeItems: types.func,
  onPick: types.func,
  onSearch: types.func,
  placeholder: types.string,
  selectedSuggestion: types.any,
  value: types.string
};
Autocomplete.defaultProps = {
  maxItems: 50, onInitializeItems: function onInitializeItems(done) {
    return done([]);
  }, input: React.createElement(AutocompleteInput, null), placeholder: 'Search'
};

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.onSearch = function (value, callback) {
    if (_this4.props.onSearch) return _this4.props.onSearch(value, callback);
    var maxItems = _this4.props.maxItems;
    var trie = _this4.state.trie;

    if (!trie) return callback([]);
    value = value.trim();
    var result = trie.get(value || '');
    if (_this4.props.onFilter) {
      result = _this4.props.onFilter(result);
    }
    callback(result.slice(0, maxItems));
  };

  this.showList = function () {
    var defaultValue = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

    var value = defaultValue === null ? _this4.state.value : defaultValue;
    _this4.onSearch(value, function (suggestedValues) {
      _this4.setState({ hidden: false, suggestedValues: suggestedValues });
    });
  };

  this.onPick = function (value) {
    _this4.props.onPick && _this4.props.onPick(value);
    _this4.hideList();
  };

  this.hideList = function () {
    _this4.setState({ hidden: true });
  };

  this.scrimClick = function () {
    _this4.hideList();
  };

  this.scrollIntoView = function () {
    Array.from(ReactDOM.findDOMNode(_this4).querySelectorAll('.highlighted')).map(function (el) {
      return scrollIntoView(el, { validTarget: function validTarget(target) {
          return target !== window;
        } });
    });
  };
};

module.exports = {
  Autocomplete: Autocomplete,
  AutocompleteInput: AutocompleteInput,
  AutocompleteList: AutocompleteList
};